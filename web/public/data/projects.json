[{"id":1,"slug":"testing-equipment-repair-pipeline-dashboard","title":"Testing Equipment Repair Pipeline Dashboard","description":"A full‑stack dashboard that aggregates component data from multiple databases to track repair components across seven pipeline stages. Delivered in five weeks, it normalizes disparate schemas, exposes a FastAPI service layer, and integrates with a React/TypeScript UI for fast, paginated filtering and lookups. I owned the backend architecture (FastAPI, Pydantic, MySQL), integrated the API with the frontend, and led Scrum to translate stakeholder feedback into shippable increments while negotiating scope to meet deadlines.","link":"/projects/testing-equipment-repair-pipeline-dashboard","thumbnail":"/assets/images/dashboard-thumbnail.jpg","stack":["FastAPI","Python","MySQL","React","TypeScript","Vite","Ant Design","GitHub","Jira"],"bullets":["Owned backend architecture: designed data models and REST endpoints with Pydantic, authored SQL schemas, and enforced clear API contracts.","Solved cross‑stack issues: fixed pagination and data‑shape mismatches so large datasets rendered correctly and quickly in the UI.","Integrated API with React/TypeScript: typed fetch layer, error handling, and responsive table/filters for fast, reliable workflows.","Led Scrum: facilitated stand‑ups, sprint planning, and retros; managed Jira board; kept scope and velocity aligned with client priorities.","Negotiated scope to hit deadline: de‑scoped historical charts/graphical time‑series in favor of high‑value operational metrics.","Authored artifacts that leveled up the team: system architecture diagram and API docs to align developers and stakeholders.","Drove stakeholder communication: frequent demos and concise status updates translating technical detail into business outcomes.","Unblocked teammates: environment setup help, code reviews, and pair‑debugging to keep the team moving under tight timelines.","Raised quality under pressure: balanced rapid iteration with disciplined contracts/tests to minimize regressions during fast roll‑outs.","Reflections: would delegate more evenly and tighten daily standups to surface blockers earlier and improve throughput."],"jar_url":null,"abstract":"Full‑stack dashboard aggregating multi‑DB repair data across seven stages. I owned the FastAPI/MySQL backend, integrated a React/TypeScript UI, and led Scrum to deliver in five weeks."}]